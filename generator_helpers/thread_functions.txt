void cleanup_thread(ThreadArgs args, bool join, bool success)
{
    int rc = 0;

    *args.thread_is_initialized = success;

    if (join)
    {
        rc = pthread_join(*args.thread, NULL);
        if (rc != 0)
        {
            fprintf(stderr, "cleanup_thread() - Err [0] - code: %u", rc);
        }
    }
           
    rc = pthread_attr_destroy(args.attr);
    if (rc != 0)
    {
        fprintf(stderr, "cleanup_thread() - Err [1] - code: %u", rc);
    }
               
    rc = pthread_cond_destroy(args.thread_init_cond);
    if (rc != 0)
    {
        fprintf(stderr, "cleanup_thread() - Err [2] - code: %u", rc);
    }
               
    rc = pthread_mutex_destroy(args.thread_init_mutex);
    if (rc != 0)
    {
        fprintf(stderr, "cleanup_thread() - Err [3] - code: %u", rc);
    }
}

void init_thread_send_status_signal_to_main_thread(ThreadArgs* args, bool success)
{
    int rc = 0;

    rc = pthread_mutex_lock(args->thread_init_mutex);
    if (rc != 0)
    {
        fprintf(stderr, "init_thread() - Err [0] - code: %u", rc);
    }

    *(args->thread_is_initialized) = success;

    rc = pthread_cond_signal(args->thread_init_cond);
    if (rc != 0)
    {
        fprintf(stderr, "init_thread() - Err [1] - code: %u", rc);
    }

    rc = pthread_mutex_unlock(args->thread_init_mutex);
    if (rc != 0)
    {
        fprintf(stderr, "init_thread() - Err [2] - code: %u", rc);
    }
}

void* init_thread(void* arg) 
{
    int rc = 0;

    size_t  _stack_size;
    void*    stack_start;
    void*    stack_end;
    void*    stack_loading_ptr;

    ThreadArgs* args = (ThreadArgs*)arg;

    rc = pthread_attr_getstack(args->attr, &stack_start, &_stack_size);
    if (rc != 0)
    {
        fprintf(stderr, "init_thread() - Err [0] - code: %u", rc);
        init_thread_send_status_signal_to_main_thread(args, false);
        return NULL;
    }

    if (_stack_size != stack_size)
    {
        fprintf(stderr, "init_thread() - Err [1] - Stack allocation was not successful.");
        init_thread_send_status_signal_to_main_thread(args, false);
        return NULL;
    }

    stack_loading_ptr = stack_start;
    stack_end = (const void*)((uintptr_t)stack_start + stack_size);

    /*
    * FAKE INIT SEQUENCE
    */

    for (size_t i = 0; i < (sizeof(wordSizes) / sizeof(wordSizes[0])); ++i)
    {
        fprintf(stdout, "%" PRIu16 "\n", wordSizes[i]);
    }

    init_thread_send_status_signal_to_main_thread(args, true);

    /*
    * END FAKE INIT SEQUENCE
    */

    // do more stuff...

    return NULL;
}